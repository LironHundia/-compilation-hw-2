%{
//C user declarations
	#include <iostream>
	#include "output.hpp"
	extern int yylineno;
	struct Node{
		
	};
	#define YYSTYPE Node*
	int yylex();
	void yyerror(const char*);
%}
//declarations

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token CONST
%token TRUE
%token FALSE 
%token RETURN
%token IF
%token WHILE 
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token ID
%token NUM
%token STRING

%right ASSIGN
%left OR
%left AND
%left RELOP_EQUAL
%nonassoc RELOP_COMPARE
%left BINOP_ADD
%left BINOP_MUL
%right NOT
%left LPAREN
%left RPAREN
%left LBRACE
%left RBRACE
%nonassoc ELSE





%%
//rules
Program		:	Funcs                                                        {output::printProductionRule(1);}
;                                                                             
Funcs		:	/*epsilon*/                                                  {output::printProductionRule(2);}
			|	FuncDecl Funcs                                               {output::printProductionRule(3);}
;                                                                             
FuncDecl	:	RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE    {output::printProductionRule(4);} 
;                                                                             
RetType		:	Type                                                         {output::printProductionRule(5);}
			|	VOID                                                         {output::printProductionRule(6);}
;                                                                             
Formals		:	/*epsilon*/                                                  {output::printProductionRule(7);}
			|	FormalsList                                                  {output::printProductionRule(8);}
;                                                                             
FormalsList	:	FormalDecl                                                   {output::printProductionRule(9);}
			|	FormalDecl COMMA FormalsList                                 {output::printProductionRule(10);}
;                                                                             
FormalDecl	:	TypeAnnotation Type ID                                                      {output::printProductionRule(11);}
;                                                                             
Statements	:	Statement                                                    {output::printProductionRule(12);}
			|	Statements Statement                                         {output::printProductionRule(13);}
;                                                                             
Statement	:	LBRACE Statements RBRACE                                     {output::printProductionRule(14);}
			|	TypeAnnotation Type ID SC                                    {output::printProductionRule(15);}
			|	TypeAnnotation Type ID ASSIGN Exp SC                         {output::printProductionRule(16);}
			|	ID ASSIGN Exp SC                                             {output::printProductionRule(17);}
			|	Call SC                                                      {output::printProductionRule(18);}
			|	RETURN SC                                                    {output::printProductionRule(19);}
			|	RETURN Exp SC                                                {output::printProductionRule(20);}
			|	IF LPAREN Exp RPAREN Statement                               {output::printProductionRule(21);}
			|	IF LPAREN Exp RPAREN Statement ELSE Statement                {output::printProductionRule(22);}
			|	WHILE LPAREN Exp RPAREN Statement                            {output::printProductionRule(23);}
			|	BREAK SC                                                     {output::printProductionRule(24);}
			|	CONTINUE SC                                                  {output::printProductionRule(25);}
;                                                                            
Call		:	ID LPAREN ExpList RPAREN                                     {output::printProductionRule(26);}
			|	ID LPAREN RPAREN                                             {output::printProductionRule(27);}
;                                                                            
ExpList		:	Exp                                                          {output::printProductionRule(28);}
			|	Exp COMMA ExpList                                            {output::printProductionRule(29);}
;                                                                            
Type		:	INT                                                          {output::printProductionRule(30);}
			|	BYTE                                                         {output::printProductionRule(31);}
			|	BOOL                                                         {output::printProductionRule(32);}
;                                                                          
TypeAnnotation	:	/*epsilon*/                                              {output::printProductionRule(33);}
				|	CONST                                                    {output::printProductionRule(34);}
;                                                                        
Exp			:	LPAREN Exp RPAREN                                            {output::printProductionRule(35);}
			|	Exp BINOP_MUL Exp                                            {output::printProductionRule(36);}
			|	Exp BINOP_ADD Exp                                            {output::printProductionRule(36);}
			|	ID                                                           {output::printProductionRule(37);}
			|	Call                                                         {output::printProductionRule(38);}
			|	NUM                                                          {output::printProductionRule(39);}
			|	NUM B                                                        {output::printProductionRule(40);}
			|	STRING                                                       {output::printProductionRule(41);}
			|	TRUE                                                         {output::printProductionRule(42);}
			|	FALSE                                                        {output::printProductionRule(43);}
			|	NOT Exp                                                      {output::printProductionRule(44);}
			|	Exp AND Exp                                                  {output::printProductionRule(45);}
			|	Exp OR Exp                                                   {output::printProductionRule(46);}
			|	Exp RELOP_COMPARE Exp                                        {output::printProductionRule(47);}
			|	Exp RELOP_EQUAL Exp                                          {output::printProductionRule(47);}
			|	LPAREN TypeAnnotation Type RPAREN Exp						 {output::printProductionRule(48);}
;
%%
//C user routines
void yyerror(const char* input){
	output::errorSyn(yylineno);
	exit(1);
}
int main(){
	return yyparse();
}






